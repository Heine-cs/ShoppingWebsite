@model IEnumerable<OllieShop.ViewModels.VMProductWithSpecification>
@{
    var productPlusSpec = @Model.FirstOrDefault();
    ViewData["Title"] = "商品【" + @productPlusSpec.Name + "】頁面";
}
<style>
    #ImgContainer{
        height:730px;
    }
    #ImgContainer >img:first-child{
        width:100%;
        height: 100%;
        object-fit:contain;
    }
    /*隱藏input欄位的增減鍵*/
    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    /* 隱藏input欄位的增減鍵 Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }


</style>

<div class="container-fluid row p-1">
    <div class="col align-self-center" id="ImgContainer">
        <img src="@productPlusSpec.Picture" />
    </div>

    @{
        //資料顯示格式處理
        string Inquired = productPlusSpec.Inquired == true ? "開放詢價" : "不開放詢價";
        string Unopened = productPlusSpec.Unopened == true ? "全新品" : "二手品";
        string Installment = productPlusSpec.Installment == true ? "開放分期" : "不開放分期";
        int RestQuantity  = productPlusSpec.ShelfQuantity - productPlusSpec.SoldQuantity;
    }

    <div class="col mt-1 d-flex flex-column">
        <h1><strong>@productPlusSpec.Name</strong></h1>
        <div class="flex-grow-1">
            <div class="fs-5 row">
                <div class="col">
                    <div>商品狀況 : @Unopened</div>
                    <div>商品數量 : @(RestQuantity)件</div>
                    <div>備貨日 : @(productPlusSpec.LeadDay)個工作天</div>
                    <div>運費 : NT$@productPlusSpec.DeliveryFee.ToString("0")</div>
                    <div>商品贈品 : @productPlusSpec.Freebie</div>
                </div>
                <div class="col">
                    <div>詢價許可 : @Inquired</div>
                    <div>分期許可 : @Installment</div>
                    <div>體積 : @productPlusSpec.Size cm³</div>
                    <div>商品重量 : @productPlusSpec.Weight 公斤</div>
                    <div>商品描述 : @productPlusSpec.Description</div>
                </div>
            </div>
            <div class="p-0 mt-3">@await Component.InvokeAsync("VCSellers" , new{SRID=productPlusSpec.SRID})</div>
            
        </div>

        <div class="row flex-grow-0">
            <h2 class="col-4 align-self-center">售價 : NT$ @productPlusSpec.UnitPrice.ToString("0")</h2>
            <div class="col-8 d-flex justify-content-end mb-2">
                <i class="bi bi-plus-circle fs-1 me-3 text-primary" onclick="ProductQuantityChange(1)"></i>
                <i class="bi bi-dash-circle fs-1 me-3 text-secondary" onclick="ProductQuantityChange(-1)"></i>
                <input id="InputQuantity" class="form-control w-25" type="number" min="1" value="1" oninput="InputvalidateAndClear();validity.valid||(value=1);" /><span class="fs-1 me-2">個</span>
                <div class="btn btn-outline-primary btn-lg" onclick="saveProductToCart()">
                    加入購物車
                    <i class="ms-1 bi bi-cart4 fs-4"></i>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script>
        function ProductQuantityChange(QuantityChangeValue) {
            let InputQuantity = document.getElementById("InputQuantity");
            let IntInputQuantity = parseInt(InputQuantity.value);
            if (IntInputQuantity === 1 && QuantityChangeValue === -1){
                return "";
            }
            IntInputQuantity += QuantityChangeValue;
            if (IntInputQuantity > @RestQuantity) {
                return ""; 
            }
            InputQuantity.value = IntInputQuantity;
        }

        function InputvalidateAndClear() {
        
            let inputElement = document.getElementById("InputQuantity");
            let inputValue = inputElement.value;
            // 執行驗證邏輯
            if (inputValue > @RestQuantity || inputValue === 0) {
            // 驗證失敗，清除輸入
            inputElement.value = 1;
            }
        }

        function saveProductToCart() {
            // 取得當前存在 localStorage 的商品資料
            let cartData = localStorage.getItem('cartData');
            let newCartData = [];
            let InputQuantity = Number(document.getElementById("InputQuantity").value);
            if (cartData !== null) {
                // 從localStorage取出序列化後的2D ARRAY先轉回Javascript的陣列放入 newCartData 陣列儲存
                newCartData = JSON.parse(cartData);
                //push到newCartData陣列之前先到存放specificationsID的陣列搜尋SNID，搜尋到就直接在inputQuantityArr加總，
                //indexof找不到會回傳-1
                let SNIDIndexValue = newCartData[1].indexOf(@Model.FirstOrDefault().SNID);
                if (SNIDIndexValue == -1) {
                    newCartData[0].push(@Model.FirstOrDefault().PTID);
                    newCartData[1].push(@Model.FirstOrDefault().SNID);
                    newCartData[2].push(InputQuantity);
                }
                //搜尋到撈出記錄在newCartData的數量
                //與當前inputQuantityArr加總確認是否超出商品數量，如果超出跳警告，沒有超出就新增
                if ((InputQuantity + newCartData[2][SNIDIndexValue]) > @RestQuantity){
                    alert('加入購物車操作失敗，因加入數量與購物車商品數量加總超出商品數量【@RestQuantity】件，請先確認購物車商品數量再重新添加');
                    return "";
                }
                //沒有超出商品數量就新增
                newCartData[2][SNIDIndexValue] += InputQuantity;
            }
            else {
                // 初始化 productID 、specificationsID 、 inputQuantity
                let productID = [];
                let specificationsID = [];
                let inputQuantityArr = [];

                // PTID 放在第一個陣列
                productID.push(@Model.FirstOrDefault().PTID);
                newCartData.push(productID);
            
                // SNID 放在第二個陣列
                specificationsID.push(@Model.FirstOrDefault().SNID);
                newCartData.push(specificationsID);

                // InputQuantity 放在第三個陣列
                inputQuantityArr.push(InputQuantity);
                newCartData.push(inputQuantityArr);
            }
            // 存储到 localStorage
            localStorage.setItem('cartData', JSON.stringify(newCartData));

            //提示用戶存入購物車操作成功
            alert('成功將商品加入購物車!!');
        }

        breakCacheStoreRuleForDisplayUpdatePhoto("#ImgContainer img"); 
    </script>
    }